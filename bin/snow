#!/usr/bin/env ruby
$:.unshift(File.dirname(__FILE__) + '/../lib') unless $:.include?(File.dirname(__FILE__) + '/../lib')

require 'uri'
require 'net/http'
require 'gli'
require 'snow'
require 'byebug'
require 'yaml'

include GLI::App

program_desc 'Snow controls a lesson system'

version Snow::VERSION

subcommand_option_handling :normal
arguments :strict

#TODO: read this from a configuration yml file
DROPBOX_ROOT = '~/dropbox_railsmania/Dropbox/'

CACHE_FILE = File.join(Dir.home, '.snow_cache')

#desc 'Describe some switch here'
#switch [:o,:offline]

#desc 'Describe some flag here'
#default_value 'the default'
#arg_name 'The name of the argument'
#flag [:f,:flagname]


def column(text)
  text.rjust(20)
end

def read_cache_file
  if File.exists?(CACHE_FILE)
    YAML.load_file(CACHE_FILE) || []
  else
    []
  end
end

def write_cache_file(data)
  File.open(CACHE_FILE,"w+") do |f|
    YAML.dump(data,f)
  end
end

def discover_lesson_statutes(lesson_names)
  cached_done = read_cache_file
  lesson_names.inject({}) do |results, name|
    if cached_done.include?(name)
      en_status = 'DONE'
      es_status = 'DONE'
    else
      en_status = LessonStatus.new.lesson_status(name, :en)
      es_status = if LessonStatus.script_done?(en_status)
        LessonStatus.new.lesson_status(name, :es) 
      else
        'NA'
      end
    end
    results[name] = [en_status, es_status]
    results
  end
end


desc 'List all the lessons'
arg_name 'Describe arguments to list here'
command :list do |c|
#  c.desc 'Describe a switch to list'
#  c.switch :s

#  c.desc 'Describe a flag to list'
#  c.default_value 'default'
#  c.flag :f
  c.action do |global_options,options,args|
    
    # TODO: check sergio workflow
    # TODO: check if lesson is in site?
    # TODO: offline/cache
    # TODO: do not show DONE lines
    # TODO: keep a file in dropbox so sergio can see status

     
    all_md_files = ScriptsDir.new.all_md_files
    
    # leave only short names, we lose the real filename
    md_files = all_md_files.map{|file| file.gsub(/.*data\/scripts\//, '')}
    
    es_files = md_files.select{|filename| filename.end_with?('_es.md')}
    en_files = md_files.select{|filename| filename.end_with?('_en.md')}
    ja_files = md_files.select{|filename| filename.end_with?('_ja.md')}
    
    files_without_language = md_files - es_files - en_files - ja_files
    if !files_without_language.empty?
      puts "WARNING, these files do not have a language: #{files_without_language}"
    end
    
    lesson_names = en_files.map { |en_file| en_file.gsub('_en.md', '')}
    puts "Processing all the lessons' status"
    lesson_statuses = discover_lesson_statutes(lesson_names)
    done_lessons = lesson_statuses.select{|name, results| results.all?{|value| value == 'DONE'}}
    
    write_cache_file(done_lessons)
    
    puts "#{'lesson name'.rjust(55)}#{column('English status')}#{column('Spanish status')}"
#{column('Japanese status')}"
    lesson_statuses.each_pair do |name, statuses|
      puts "#{name.rjust(55)}#{column(statuses[0])}#{column(statuses[1])}" #{column(ja_status)}"
    end
    puts
    puts "We have completed #{done_lessons.size} lessons in all languages!"

  end
end

desc 'Create a new lesson[TODO]'
arg_name 'Describe arguments to new here'
command :new do |c|
  c.action do |global_options,options,args|
    puts "new command ran"
  end
end

desc 'Shows the status of a lesson[TODO]'
arg_name 'Describe arguments to status here'
command :status do |c|
  c.action do |global_options,options,args|
    puts "status command ran"
  end
end

on_error do
  true
end

exit run(ARGV)
